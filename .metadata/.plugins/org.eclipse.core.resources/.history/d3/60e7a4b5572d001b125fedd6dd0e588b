package com.datarynx.order.service.api.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.netflix.hystrix.EnableHystrix;
import org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.datarynx.order.service.api.common.Payment;
import com.datarynx.order.service.api.common.TransactionRequest;
import com.datarynx.order.service.api.common.TransactionResponse;
import com.datarynx.order.service.api.entity.Order;
import com.datarynx.order.service.api.repository.OrderRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

import reactor.core.publisher.Mono;

@Service
@RefreshScope
@EnableHystrix
@EnableHystrixDashboard
public class OrderService {

    Logger logger= LoggerFactory.getLogger(OrderService.class);
    @Autowired
    private OrderRepository repository;
    @Autowired
    //@Lazy
    private RestTemplate template;


	/*
	 * @Value("${microservice.payment-service.endpoints.endpoint.uri}") private
	 * String ENDPOINT_URL;
	 */
    String response = "";
    Order order;
    Payment  payment;

    @HystrixCommand(groupKey = "datarynx", commandKey = "datarynx", fallbackMethod = "paymentServiceFallBack")
    public TransactionResponse saveOrder(TransactionRequest request) throws JsonProcessingException {
    	
        Order order = request.getOrder();
        Payment  payment = request.getPayment();
        payment.setOrderId(order.getId());
        payment.setAmount(order.getPrice());
        //rest call
        logger.info("Order-Service Request : "+new ObjectMapper().writeValueAsString(request));
        //Payment paymentResponse = template.postForObject("http://localhost:9191/payment/doPayment", payment, Payment.class);
        Payment paymentResponse = template.postForObject("http://PAYMENT-SERVICE/payment/doPayment", payment, Payment.class);

        response = paymentResponse.getPaymentStatus().equals("success") ? "payment processing successful and order placed" : "there is a failure in payment api , order added to cart";
        logger.info("Order Service getting Response from Payment-Service : "+new ObjectMapper().writeValueAsString(response));
        repository.save(order);
        return new TransactionResponse(order, paymentResponse.getAmount(), paymentResponse.getTransactionId(), response);
    }
    
	/*
	 * public String bookMyShowFallBack() { return "service gateway failed..."; }
	 */
	/*
	 * public Mono<String> paymentServiceFallBack() { return Mono.
	 * just("Payment Service is taking too long to respond or is down. Please try again later"
	 * ); }
	 */
    

    public TransactionResponse paymentServiceFallBack()
    {
         response = "payment service is down due to network failure";
         return new TransactionResponse(order, paymentResponse.getAmount(), paymentResponse.getTransactionId(), response);
    }
}
